service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/permissionGroups/admin).data[request.auth.uid];
    }

    function isEventAdmin() {
      return get(/databases/$(database)/documents/permissionGroups/eventAdmin).data[request.auth.uid];
    }

    function isLeader() {
      return get(/databases/$(database)/documents/communityGroups/$(story)).data.leaders[request.auth.uid];
    }

    function isUserCollection(collection) {
      return collection == "user";
    }

    match /users/{userId} {
      // Allow a request if the user ID in the path is 12345
      // e.g. /projects/projectId/databases/(default)/documents/users/12345
      allow read, update: if request.path[6] == request.auth.uid
    }

    match /summerMissions/{id} {
      // Data validation for required fields
      allow write: if request.resource.data.keys().hasAll(['name', 'location', 'startDate', 'endDate'])
                   && request.resource.data.name is string
                   && request.resource.data.location is string
                   && request.resource.data.startDate is timestamp
                   && request.resource.data.endDate is timestamp
                   && isAdmin();
    }

    match /campuses/{id} {
      // Data validation for required fields
      allow write: if request.resource.data.keys().hasAll(['name', 'location'])
                   && request.resource.data.name is string
                   && request.resource.data.location is string
                   && isAdmin();
    }

    match /communityGroups/{communityGroupId} {
      // Data validation for required fields
      allow write: if request.resource.data.keys().hasAll(['name', 'type', 'gender'])
                   && request.resource.data.name is string
                   && request.resource.data.type is string
                   && request.resource.data.gender is string
                   && (request.resource.data.type == 'Freshmen' || request.resource.data.type == 'Sophomore'
                      || request.resource.data.type == 'Junior' || request.resource.data.type == 'Senior'
                      || request.resource.data.type == 'Graduate' || request.resource.data.type == 'Faculty'
                      || request.resource.data.type == 'Mixed Ages' || request.resource.data.type == 'Mixed Sexes')
                   && (request.resource.data.gender == 'Male' || request.resource.data.gender == 'Female'
                      || request.resource.data.gender == 'Other')
                   && isAdmin()
      allow update: if request.resource.data.keys().hasAll(['name', 'type', 'gender'])
                   && request.resource.data.name is string
                   && request.resource.data.type is string
                   && request.resource.data.gender is string
                   && (request.resource.data.type == 'Freshmen' || request.resource.data.type == 'Sophomore'
                      || request.resource.data.type == 'Junior' || request.resource.data.type == 'Senior'
                      || request.resource.data.type == 'Graduate' || request.resource.data.type == 'Faculty'
                      || request.resource.data.type == 'Mixed Ages' || request.resource.data.type == 'Mixed Sexes')
                   && (request.resource.data.gender == 'Male' || request.resource.data.gender == 'Female'
                      || request.resource.data.gender == 'Other')
                   && isLeader();
    }

    match /events/{id} {
      // Data validation for required fields
      allow write: if request.resource.data.keys().hasAll(['name', 'startDate', 'endDate'])
                   && request.resource.data.name is string
                   && request.resource.data.startDate is timestamp
                   && request.resource.data.endDate is timestamp
                   && request.resource.data.name.size() <= 35
                   && isAdmin();
    }

    match /ministries/{id} {
      // Data validation for required fields
      allow write: if request.resource.data.keys().hasAll(['name'])
                   && request.resource.data.name is string
                   && isAdmin();
    }

    match /ministryTeams/{id} {
      // Data validation for required fields
      allow write: if request.resource.data.keys().hasAll(['name', 'parentMinistry'])
                   && request.resource.data.name is string
                   && request.resource.data.parentMinistry is string
                   && isAdmin();
    }

    match /{document=**} {
      // This should exclude /users/{userId}
      allow read: if (isSignedIn() && !isUserCollection(request.path[5])) || isAdmin();
      //allow write: if isAdmin();          // If we have allow write if isAdmin() here it will bypass all
                                            // the validation rules for specific collections
    }
  }
}
